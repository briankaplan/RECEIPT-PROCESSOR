#!/usr/bin/env python3
"""
Development Mode Helper
Quick switch between development and production configurations
"""

import os
import sys
import subprocess
from pathlib import Path

def check_ngrok():
    """Check if ngrok is installed and running"""
    try:
        result = subprocess.run(['which', 'ngrok'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ ngrok is installed")
            return True
        else:
            print("‚ùå ngrok not found - install with: brew install ngrok")
            return False
    except:
        print("‚ùå ngrok not found - install with: brew install ngrok")
        return False

def start_ngrok():
    """Start ngrok tunnel"""
    print("üöÄ Starting ngrok tunnel on port 5000...")
    try:
        # Start ngrok in background
        process = subprocess.Popen(['ngrok', 'http', '5000'], 
                                 stdout=subprocess.DEVNULL, 
                                 stderr=subprocess.DEVNULL)
        
        # Wait a moment for ngrok to start
        import time
        time.sleep(2)
        
        # Get ngrok URL
        import requests
        try:
            response = requests.get('http://localhost:4040/api/tunnels')
            tunnels = response.json()['tunnels']
            if tunnels:
                public_url = tunnels[0]['public_url']
                print(f"‚úÖ ngrok tunnel active: {public_url}")
                return public_url
        except:
            print("‚ö†Ô∏è  ngrok started but couldn't get URL automatically")
            print("   Check http://localhost:4040 for ngrok dashboard")
            return None
            
    except Exception as e:
        print(f"‚ùå Failed to start ngrok: {e}")
        return None

def create_dev_env():
    """Create development .env file"""
    env_content = f"""# Development Environment - Generated by dev_mode.py
FLASK_ENV=development
FLASK_DEBUG=true
DEBUG=true
SECRET_KEY=dev-secret-key-change-in-production

# Teller Configuration
TELLER_APPLICATION_ID=app_pbvpiocruhfnvkhf1k000
TELLER_ENVIRONMENT=sandbox
TELLER_API_URL=https://api.teller.io
TELLER_API_VERSION=2020-10-12
TELLER_WEBHOOK_URL=http://localhost:5000/teller/webhook
TELLER_SIGNING_SECRET=q7xdfvnwf6nbajjghgzbnzaut4tm4sck
TELLER_SIGNING_KEY=cXLqnm451Bi1sMtKTPWOwdFz3gMtNYPn2hVkgXxy9gc=
TELLER_CERT_PATH=./credentials/teller_certificate.pem
TELLER_KEY_PATH=./credentials/teller_private_key.pem

# Gmail Configuration
GMAIL_ACCOUNT_1_EMAIL=kaplan.brian@gmail.com
GMAIL_ACCOUNT_1_DISPLAY_NAME=Personal Gmail
GMAIL_ACCOUNT_1_ENABLED=true
GMAIL_ACCOUNT_1_PICKLE_FILE=./gmail_tokens/kaplan_brian_gmail.pickle
GMAIL_ACCOUNT_1_PORT=8080

GMAIL_ACCOUNT_2_EMAIL=brian@downhome.com
GMAIL_ACCOUNT_2_DISPLAY_NAME=Down Home Business
GMAIL_ACCOUNT_2_ENABLED=true
GMAIL_ACCOUNT_2_PICKLE_FILE=./gmail_tokens/brian_downhome.pickle
GMAIL_ACCOUNT_2_PORT=8081

GMAIL_ACCOUNT_3_EMAIL=brian@musiccityrodeo.com
GMAIL_ACCOUNT_3_DISPLAY_NAME=Music City Rodeo
GMAIL_ACCOUNT_3_ENABLED=true
GMAIL_ACCOUNT_3_PICKLE_FILE=./gmail_tokens/brian_musiccityrodeo.pickle
GMAIL_ACCOUNT_3_PORT=8082

# Google Services
GOOGLE_CREDENTIALS_PATH=./credentials/gmail_credentials.json
GOOGLE_SERVICE_ACCOUNT_PATH=./credentials/service_account.json
GOOGLE_APPLICATION_CREDENTIALS=./credentials/service_account.json
GOOGLE_VISION_API_KEY=AIzaSyBZ9qhpU4qn0QzUPLs4tZfKII52BEOELzc
GOOGLE_SHEETS_ID=1Pa4prgHYiYnxSD1qw88HT-cnwhG4u74uCIN4v8rS18Y
GOOGLE_SHEETS_NAME=Receipt Dashboard

# MongoDB
MONGODB_URI=mongodb+srv://kaplanbrian:tixvob-7Nefza-pijtaq@expense.1q8c63f.mongodb.net/?retryWrites=true&w=majority&appName=Expense
MONGODB_DATABASE=expense
MONGODB_COLLECTION=receipts

# R2 Storage
R2_ENDPOINT=https://33950783df90825d4b885322a8ea2f2f.r2.cloudflarestorage.com
R2_ACCESS_KEY=154b6375ad63f0852482f4551047785c
R2_SECRET_KEY=1f77f1dd75b20bbd913e0dab79057e10b96f6ca69197c6476165880dfba692a5
R2_BUCKET=expensesbk
R2_PUBLIC_URL=https://pub-33950783df90825d4b885322a8ea2f2f.r2.dev

# AI Services
HUGGINGFACE_API_KEY=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
OPENAI_API_KEY=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

# Processing Configuration
MAX_CONCURRENT_PROCESSING=3
MAX_EMAILS_PER_BATCH=50
PROCESSING_DAYS=30
AI_CONFIDENCE_THRESHOLD=0.7
AMOUNT_TOLERANCE=0.01
DATE_TOLERANCE_DAYS=3
LOCAL_EXPORT_ENABLED=true
MAX_CONTENT_LENGTH=16777216
LOG_LEVEL=DEBUG
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Development .env file created")

def main():
    """Main development setup"""
    print("üõ†Ô∏è Development Mode Setup")
    print("=" * 40)
    
    mode = input("Choose mode:\n1. Development (local)\n2. Production test (local)\n3. Just create .env\nChoice (1-3): ")
    
    if mode == "1":
        # Development mode with ngrok
        print("\nüîß Setting up development mode...")
        
        # Create dev .env
        create_dev_env()
        
        # Check ngrok
        if not check_ngrok():
            print("\n‚ùå Please install ngrok first:")
            print("   brew install ngrok")
            return
        
        # Start ngrok
        ngrok_url = start_ngrok()
        
        if ngrok_url:
            # Update .env with ngrok URL
            with open('.env', 'r') as f:
                content = f.read()
            
            content = content.replace(
                'TELLER_WEBHOOK_URL=http://localhost:5000/teller/webhook',
                f'TELLER_WEBHOOK_URL={ngrok_url}/teller/webhook'
            )
            
            with open('.env', 'w') as f:
                f.write(content)
            
            print(f"‚úÖ Updated webhook URL to: {ngrok_url}/teller/webhook")
        
        print("\nüìã Next steps:")
        print("1. Update Teller dashboard webhook URL with the ngrok URL above")
        print("2. Add localhost OAuth redirects to Google Cloud Console:")
        print("   - http://localhost:5000/oauth2callback")
        print("   - http://localhost:5000/teller/callback")
        print("3. Start your Flask app: python app.py")
        
    elif mode == "2":
        # Production test mode
        print("\nüöÄ Setting up production test mode...")
        create_dev_env()
        
        # Update for production testing
        with open('.env', 'r') as f:
            content = f.read()
        
        content = content.replace('FLASK_ENV=development', 'FLASK_ENV=production')
        content = content.replace('FLASK_DEBUG=true', 'FLASK_DEBUG=false')
        content = content.replace('DEBUG=true', 'DEBUG=false')
        
        with open('.env', 'w') as f:
            f.write(content)
        
        print("‚úÖ Production test .env file created")
        print("\nüìã Start with: gunicorn app:app --bind 0.0.0.0:5000")
        
    elif mode == "3":
        # Just create .env
        create_dev_env()
        print("‚úÖ Basic .env file created - customize as needed")
        
    else:
        print("‚ùå Invalid choice")

if __name__ == '__main__':
    main() 